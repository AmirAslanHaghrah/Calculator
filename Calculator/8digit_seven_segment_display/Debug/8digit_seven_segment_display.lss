
8digit_seven_segment_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069f  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ee  00000000  00000000  000008ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026c  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ed  00000000  00000000  00001519  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
							0b1101101, // -> 5
							0b1111100, // -> 6
							0b0000111, // -> 7
							0b1111111, // -> 8
							0b1101111  // -> 9
						};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
		
	DDRC = 0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;
  ac:	81 bb       	out	0x11, r24	; 17
			//N = N / 10;
			//_delay_ms(7);
		//}
		
		uint8_t n = 0;
		uint32_t N = input;
  ae:	6b e7       	ldi	r22, 0x7B	; 123
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
			//PORTD = ~(0b00000001 << n);
			//N = N / 10;
			//_delay_ms(7);
		//}
		
		uint8_t n = 0;
  b6:	10 e0       	ldi	r17, 0x00	; 0
		uint32_t N = input;
		while(N > 0){
  b8:	61 15       	cp	r22, r1
  ba:	71 05       	cpc	r23, r1
  bc:	81 05       	cpc	r24, r1
  be:	91 05       	cpc	r25, r1
  c0:	b1 f3       	breq	.-20     	; 0xae <main+0x2c>
			PORTD = 0xff;
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	22 bb       	out	0x12, r18	; 18
			PORTC = digit[N % 10];
  c6:	2a e0       	ldi	r18, 0x0A	; 10
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	0e 94 87 00 	call	0x10e	; 0x10e <__udivmodsi4>
  d2:	e1 e0       	ldi	r30, 0x01	; 1
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ec 0f       	add	r30, r28
  d8:	fd 1f       	adc	r31, r29
  da:	e6 0f       	add	r30, r22
  dc:	f7 1f       	adc	r31, r23
  de:	80 81       	ld	r24, Z
  e0:	85 bb       	out	0x15, r24	; 21
			PORTD = ~(0b00000001 << n);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 2e       	mov	r0, r17
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x6c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x68>
  f2:	80 95       	com	r24
  f4:	82 bb       	out	0x12, r24	; 18
			N = N / 10;
  f6:	62 2f       	mov	r22, r18
  f8:	73 2f       	mov	r23, r19
  fa:	84 2f       	mov	r24, r20
  fc:	95 2f       	mov	r25, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	e5 ed       	ldi	r30, 0xD5	; 213
 100:	f6 e0       	ldi	r31, 0x06	; 6
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x80>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x86>
 108:	00 00       	nop
			_delay_ms(7);
			n++;
 10a:	1f 5f       	subi	r17, 0xFF	; 255
			//_delay_ms(7);
		//}
		
		uint8_t n = 0;
		uint32_t N = input;
		while(N > 0){
 10c:	d5 cf       	rjmp	.-86     	; 0xb8 <main+0x36>

0000010e <__udivmodsi4>:
 10e:	a1 e2       	ldi	r26, 0x21	; 33
 110:	1a 2e       	mov	r1, r26
 112:	aa 1b       	sub	r26, r26
 114:	bb 1b       	sub	r27, r27
 116:	fd 01       	movw	r30, r26
 118:	0d c0       	rjmp	.+26     	; 0x134 <__udivmodsi4_ep>

0000011a <__udivmodsi4_loop>:
 11a:	aa 1f       	adc	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	ee 1f       	adc	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	a2 17       	cp	r26, r18
 124:	b3 07       	cpc	r27, r19
 126:	e4 07       	cpc	r30, r20
 128:	f5 07       	cpc	r31, r21
 12a:	20 f0       	brcs	.+8      	; 0x134 <__udivmodsi4_ep>
 12c:	a2 1b       	sub	r26, r18
 12e:	b3 0b       	sbc	r27, r19
 130:	e4 0b       	sbc	r30, r20
 132:	f5 0b       	sbc	r31, r21

00000134 <__udivmodsi4_ep>:
 134:	66 1f       	adc	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	88 1f       	adc	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	1a 94       	dec	r1
 13e:	69 f7       	brne	.-38     	; 0x11a <__udivmodsi4_loop>
 140:	60 95       	com	r22
 142:	70 95       	com	r23
 144:	80 95       	com	r24
 146:	90 95       	com	r25
 148:	9b 01       	movw	r18, r22
 14a:	ac 01       	movw	r20, r24
 14c:	bd 01       	movw	r22, r26
 14e:	cf 01       	movw	r24, r30
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
