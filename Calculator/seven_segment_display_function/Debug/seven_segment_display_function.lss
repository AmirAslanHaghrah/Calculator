
seven_segment_display_function.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cd  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000624  00000000  00000000  00000915  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000003c  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  00001591  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6d 00 	call	0xda	; 0xda <main>
  7a:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z4showm>:
}



void show(uint32_t value)
{
  82:	cf 93       	push	r28
	uint8_t n = 0;	
  84:	c0 e0       	ldi	r28, 0x00	; 0
	while(value > 0){
  86:	61 15       	cp	r22, r1
  88:	71 05       	cpc	r23, r1
  8a:	81 05       	cpc	r24, r1
  8c:	91 05       	cpc	r25, r1
  8e:	19 f1       	breq	.+70     	; 0xd6 <_Z4showm+0x54>
		PORTD = 0xff;
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	22 bb       	out	0x12, r18	; 18
		PORTC = digit[value % 10];
  94:	2a e0       	ldi	r18, 0x0A	; 10
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	0e 94 77 00 	call	0xee	; 0xee <__udivmodsi4>
  a0:	fb 01       	movw	r30, r22
  a2:	e0 5a       	subi	r30, 0xA0	; 160
  a4:	ff 4f       	sbci	r31, 0xFF	; 255
  a6:	80 81       	ld	r24, Z
  a8:	85 bb       	out	0x15, r24	; 21
		PORTD = ~(0b00000001 << n);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0c 2e       	mov	r0, r28
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <_Z4showm+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <_Z4showm+0x30>
  ba:	80 95       	com	r24
  bc:	82 bb       	out	0x12, r24	; 18
		value = value / 10;
  be:	62 2f       	mov	r22, r18
  c0:	73 2f       	mov	r23, r19
  c2:	84 2f       	mov	r24, r20
  c4:	95 2f       	mov	r25, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	e5 ed       	ldi	r30, 0xD5	; 213
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <_Z4showm+0x48>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_Z4showm+0x4e>
  d0:	00 00       	nop
		_delay_ms(7);
		n++;
  d2:	cf 5f       	subi	r28, 0xFF	; 255


void show(uint32_t value)
{
	uint8_t n = 0;	
	while(value > 0){
  d4:	d8 cf       	rjmp	.-80     	; 0x86 <_Z4showm+0x4>
		PORTD = ~(0b00000001 << n);
		value = value / 10;
		_delay_ms(7);
		n++;
	}
}
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:
void show(uint32_t value);


int main(void)
{
	DDRC = 0xff;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;
  de:	81 bb       	out	0x11, r24	; 17
		
			
	/* Replace with your application code */
	while (1)
	{	
		show(1400);
  e0:	68 e7       	ldi	r22, 0x78	; 120
  e2:	75 e0       	ldi	r23, 0x05	; 5
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 41 00 	call	0x82	; 0x82 <_Z4showm>
  ec:	f9 cf       	rjmp	.-14     	; 0xe0 <main+0x6>

000000ee <__udivmodsi4>:
  ee:	a1 e2       	ldi	r26, 0x21	; 33
  f0:	1a 2e       	mov	r1, r26
  f2:	aa 1b       	sub	r26, r26
  f4:	bb 1b       	sub	r27, r27
  f6:	fd 01       	movw	r30, r26
  f8:	0d c0       	rjmp	.+26     	; 0x114 <__udivmodsi4_ep>

000000fa <__udivmodsi4_loop>:
  fa:	aa 1f       	adc	r26, r26
  fc:	bb 1f       	adc	r27, r27
  fe:	ee 1f       	adc	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	a2 17       	cp	r26, r18
 104:	b3 07       	cpc	r27, r19
 106:	e4 07       	cpc	r30, r20
 108:	f5 07       	cpc	r31, r21
 10a:	20 f0       	brcs	.+8      	; 0x114 <__udivmodsi4_ep>
 10c:	a2 1b       	sub	r26, r18
 10e:	b3 0b       	sbc	r27, r19
 110:	e4 0b       	sbc	r30, r20
 112:	f5 0b       	sbc	r31, r21

00000114 <__udivmodsi4_ep>:
 114:	66 1f       	adc	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	88 1f       	adc	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	1a 94       	dec	r1
 11e:	69 f7       	brne	.-38     	; 0xfa <__udivmodsi4_loop>
 120:	60 95       	com	r22
 122:	70 95       	com	r23
 124:	80 95       	com	r24
 126:	90 95       	com	r25
 128:	9b 01       	movw	r18, r22
 12a:	ac 01       	movw	r20, r24
 12c:	bd 01       	movw	r22, r26
 12e:	cf 01       	movw	r24, r30
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
